// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: credential.sql

package db

import (
	"context"
)

const createCredential = `-- name: CreateCredential :one
INSERT INTO credentials (
  user_id, password
) VALUES (
  $1, $2
) RETURNING id, user_id, password, created_at, updated_at, deleted_at
`

type CreateCredentialParams struct {
	UserID   int64  `json:"user_id"`
	Password string `json:"password"`
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error) {
	row := q.db.QueryRowContext(ctx, createCredential, arg.UserID, arg.Password)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserActiveCredential = `-- name: GetUserActiveCredential :one
SELECT id, user_id, password, created_at, updated_at, deleted_at
FROM credentials
WHERE deleted_at is null and user_id = $1
order by id desc
limit 1
`

func (q *Queries) GetUserActiveCredential(ctx context.Context, userID int64) (Credential, error) {
	row := q.db.QueryRowContext(ctx, getUserActiveCredential, userID)
	var i Credential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserCredentials = `-- name: GetUserCredentials :many
SELECT id, user_id, password, created_at, updated_at, deleted_at
FROM credentials
WHERE user_id = $1
order by id desc
`

func (q *Queries) GetUserCredentials(ctx context.Context, userID int64) ([]Credential, error) {
	rows, err := q.db.QueryContext(ctx, getUserCredentials, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Credential{}
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserCredential = `-- name: RemoveUserCredential :exec
UPDATE credentials
SET deleted_at = now()
WHERE deleted_at is null and user_id = $1
`

func (q *Queries) RemoveUserCredential(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, removeUserCredential, userID)
	return err
}
