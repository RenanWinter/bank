// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: movement.sql

package db

import (
	"context"
	"database/sql"
)

const createMovement = `-- name: CreateMovement :one
INSERT INTO movements (
  account_id, amount, description, validated, transfer_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, uuid, account_id, amount, description, validated, created_at, updated_at, deleted_at, transfer_id
`

type CreateMovementParams struct {
	AccountID   int64         `json:"account_id"`
	Amount      float64       `json:"amount"`
	Description string        `json:"description"`
	Validated   bool          `json:"validated"`
	TransferID  sql.NullInt64 `json:"transfer_id"`
}

func (q *Queries) CreateMovement(ctx context.Context, arg CreateMovementParams) (Movement, error) {
	row := q.db.QueryRowContext(ctx, createMovement,
		arg.AccountID,
		arg.Amount,
		arg.Description,
		arg.Validated,
		arg.TransferID,
	)
	var i Movement
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.AccountID,
		&i.Amount,
		&i.Description,
		&i.Validated,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TransferID,
	)
	return i, err
}

const getAccountMovements = `-- name: GetAccountMovements :many
SELECT id, uuid, account_id, amount, description, validated, created_at, updated_at, deleted_at, transfer_id
FROM movements
WHERE deleted_at is null and account_id = $1
order by id desc
limit $2
offset $3
`

type GetAccountMovementsParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetAccountMovements(ctx context.Context, arg GetAccountMovementsParams) ([]Movement, error) {
	rows, err := q.db.QueryContext(ctx, getAccountMovements, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movement
	for rows.Next() {
		var i Movement
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.AccountID,
			&i.Amount,
			&i.Description,
			&i.Validated,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TransferID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMovement = `-- name: GetMovement :one
SELECT id, uuid, account_id, amount, description, validated, created_at, updated_at, deleted_at, transfer_id
FROM movements
WHERE deleted_at is null and id = $1
`

func (q *Queries) GetMovement(ctx context.Context, id int64) (Movement, error) {
	row := q.db.QueryRowContext(ctx, getMovement, id)
	var i Movement
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.AccountID,
		&i.Amount,
		&i.Description,
		&i.Validated,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TransferID,
	)
	return i, err
}

const removeMovement = `-- name: RemoveMovement :exec
UPDATE movements
SET deleted_at = now()
WHERE deleted_at is null and id = $1
`

func (q *Queries) RemoveMovement(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, removeMovement, id)
	return err
}

const updateMovement = `-- name: UpdateMovement :one
UPDATE movements
SET amount = $2, description = $3, validated = $4
WHERE id = $1
RETURNING id, uuid, account_id, amount, description, validated, created_at, updated_at, deleted_at, transfer_id
`

type UpdateMovementParams struct {
	ID          int64   `json:"id"`
	Amount      float64 `json:"amount"`
	Description string  `json:"description"`
	Validated   bool    `json:"validated"`
}

func (q *Queries) UpdateMovement(ctx context.Context, arg UpdateMovementParams) (Movement, error) {
	row := q.db.QueryRowContext(ctx, updateMovement,
		arg.ID,
		arg.Amount,
		arg.Description,
		arg.Validated,
	)
	var i Movement
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.AccountID,
		&i.Amount,
		&i.Description,
		&i.Validated,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TransferID,
	)
	return i, err
}
